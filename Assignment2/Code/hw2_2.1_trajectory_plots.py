# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C2WlsLGA7-0StFpP9nwZvPUUhe5Uf750
"""

import matplotlib.pyplot as plt
import numpy as np
import math
# Initialising the values found for kx,ky,kz in the write-up  
kx=0.7847
ky=0.5030
kz=0.360
omega_x_array=[]
omega_y_array=[]
omega_z_array=[]
psi_array=[]
theta_array=[]
phi_array=[]
Time=[]
alpha_dot=0.022218041
alpha=0
for t in range(0, 32, 1):
  alpha=alpha+alpha_dot
  #The rotation matrix
  R_k_alpha=[[kx**2*(1-np.cos(alpha))+np.cos(alpha),kx*ky*(1-np.cos(alpha))-(kz*np.sin(alpha)),kx*kz*(1-np.cos(alpha))+ky*np.sin(alpha)],
           [kx*ky*(1-np.cos(alpha))+(kz*np.sin(alpha)),ky**2*(1-np.cos(alpha))+np.cos(alpha),ky*kz*(1-np.cos(alpha))-kx*np.sin(alpha)],
           [kx*kz*(1-np.cos(alpha))-(ky*np.sin(alpha)),ky*kz*(1-np.cos(alpha))+(kx*np.sin(alpha)),kz**2*(1-np.cos(alpha))+np.cos(alpha)]]
  omega_x=1         #in deg/sec
  omega_y=0.6409    #in deg/sec
  omega_z=0.4587    #in deg/sec
  theta=math.atan(-R_k_alpha[2][0]/(np.sqrt(R_k_alpha[2][1]**2+R_k_alpha[2][2]**2)))#Calculating values
  psi= math.atan((R_k_alpha[2][1]/np.cos(theta))/(R_k_alpha[2][2]/np.cos(theta)))#Calculating values
  phi= math.atan((R_k_alpha[1][0]/np.cos(theta))/(R_k_alpha[0][0]/np.cos(theta)))#Calculating values
  psi=psi*180/math.pi                          # convert to degrees
  theta=theta*180/math.pi                      # convert to degrees
  phi=phi*180/math.pi                          # convert to degrees
  psi_array.append(psi)                        #appending values of psi in the list
  phi_array.append(phi)                        #appending values of phi in the list
  theta_array.append(theta)                    #appending values of theta in the list
  Time.append(t)                               #appending values of time in the list
  omega_x_array.append(omega_x)                #appending values of omega_x in the list
  omega_y_array.append(omega_y)                #appending values of omega_y in the list
  omega_z_array.append(omega_z)                #appending values of omega_z in the list


#Plotting trajectories

plt.title('Psi v Time', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 15})
plt.plot(Time,psi_array,'b-') #blue for psi i.e.angle of rotation about x  
plt.xlabel('Time in sec')
plt.ylabel('Psi in deg')
plt.show()
plt.title('Theta v Time', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 15})
plt.plot(Time,theta_array,'g-') #green for theta i.e. angle of rotation about y
plt.xlabel('Time in sec')
plt.ylabel('Theta in deg')
plt.show()
plt.title('Phi v Time', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 15})
plt.plot(Time,phi_array,'r-') #red for phi i.e. angle of rotation about z
plt.xlabel('Time in sec')
plt.ylabel('Phi in deg')
plt.show()
plt.title('Omega_x v Time', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 15})
plt.plot(Time,omega_x_array,'b-') #blue for omega about x
plt.xlabel('Time in sec')
plt.ylabel('omega_x in deg/sec')
plt.show()
plt.title('Omega_y v Time', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 15})
plt.plot(Time,omega_y_array,'g-') #green for omega about y
plt.xlabel('Time in sec')
plt.ylabel('omega_y in deg/sec')
plt.show()
plt.title('Omega_z v Time', fontdict={'fontname': 'Comic Sans MS', 'fontsize': 15})
plt.plot(Time,omega_z_array,'r-') #red for omega about z
plt.xlabel('Time in sec')
plt.ylabel('omega_z in deg/sec')
plt.show()